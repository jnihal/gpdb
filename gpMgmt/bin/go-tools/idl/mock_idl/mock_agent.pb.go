// Code generated by MockGen. DO NOT EDIT.
// Source: agent.pb.go

// Package mock_idl is a generated GoMock package.
package mock_idl

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	idl "github.com/greenplum-db/gpdb/gp/idl"
	grpc "google.golang.org/grpc"
)

// MockAgentClient is a mock of AgentClient interface.
type MockAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentClientMockRecorder
}

// MockAgentClientMockRecorder is the mock recorder for MockAgentClient.
type MockAgentClientMockRecorder struct {
	mock *MockAgentClient
}

// NewMockAgentClient creates a new mock instance.
func NewMockAgentClient(ctrl *gomock.Controller) *MockAgentClient {
	mock := &MockAgentClient{ctrl: ctrl}
	mock.recorder = &MockAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentClient) EXPECT() *MockAgentClientMockRecorder {
	return m.recorder
}

// DummyAgent mocks base method.
func (m *MockAgentClient) DummyAgent(ctx context.Context, in *idl.DummyAgentRequest, opts ...grpc.CallOption) (*idl.DummyAgentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DummyAgent", varargs...)
	ret0, _ := ret[0].(*idl.DummyAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyAgent indicates an expected call of DummyAgent.
func (mr *MockAgentClientMockRecorder) DummyAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyAgent", reflect.TypeOf((*MockAgentClient)(nil).DummyAgent), varargs...)
}

// DummyAgentParallel mocks base method.
func (m *MockAgentClient) DummyAgentParallel(ctx context.Context, in *idl.DummyAgentParallelRequest, opts ...grpc.CallOption) (*idl.DummyAgentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DummyAgentParallel", varargs...)
	ret0, _ := ret[0].(*idl.DummyAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyAgentParallel indicates an expected call of DummyAgentParallel.
func (mr *MockAgentClientMockRecorder) DummyAgentParallel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyAgentParallel", reflect.TypeOf((*MockAgentClient)(nil).DummyAgentParallel), varargs...)
}

// Status mocks base method.
func (m *MockAgentClient) Status(ctx context.Context, in *idl.StatusAgentRequest, opts ...grpc.CallOption) (*idl.StatusAgentReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*idl.StatusAgentReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockAgentClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAgentClient)(nil).Status), varargs...)
}

// Stop mocks base method.
func (m *MockAgentClient) Stop(ctx context.Context, in *idl.StopAgentRequest, opts ...grpc.CallOption) (*idl.StopAgentReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*idl.StopAgentReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockAgentClientMockRecorder) Stop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAgentClient)(nil).Stop), varargs...)
}

// MockAgentServer is a mock of AgentServer interface.
type MockAgentServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServerMockRecorder
}

// MockAgentServerMockRecorder is the mock recorder for MockAgentServer.
type MockAgentServerMockRecorder struct {
	mock *MockAgentServer
}

// NewMockAgentServer creates a new mock instance.
func NewMockAgentServer(ctrl *gomock.Controller) *MockAgentServer {
	mock := &MockAgentServer{ctrl: ctrl}
	mock.recorder = &MockAgentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServer) EXPECT() *MockAgentServerMockRecorder {
	return m.recorder
}

// DummyAgent mocks base method.
func (m *MockAgentServer) DummyAgent(arg0 context.Context, arg1 *idl.DummyAgentRequest) (*idl.DummyAgentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyAgent", arg0, arg1)
	ret0, _ := ret[0].(*idl.DummyAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyAgent indicates an expected call of DummyAgent.
func (mr *MockAgentServerMockRecorder) DummyAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyAgent", reflect.TypeOf((*MockAgentServer)(nil).DummyAgent), arg0, arg1)
}

// DummyAgentParallel mocks base method.
func (m *MockAgentServer) DummyAgentParallel(arg0 context.Context, arg1 *idl.DummyAgentParallelRequest) (*idl.DummyAgentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyAgentParallel", arg0, arg1)
	ret0, _ := ret[0].(*idl.DummyAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyAgentParallel indicates an expected call of DummyAgentParallel.
func (mr *MockAgentServerMockRecorder) DummyAgentParallel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyAgentParallel", reflect.TypeOf((*MockAgentServer)(nil).DummyAgentParallel), arg0, arg1)
}

// Status mocks base method.
func (m *MockAgentServer) Status(arg0 context.Context, arg1 *idl.StatusAgentRequest) (*idl.StatusAgentReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*idl.StatusAgentReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockAgentServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAgentServer)(nil).Status), arg0, arg1)
}

// Stop mocks base method.
func (m *MockAgentServer) Stop(arg0 context.Context, arg1 *idl.StopAgentRequest) (*idl.StopAgentReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(*idl.StopAgentReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockAgentServerMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAgentServer)(nil).Stop), arg0, arg1)
}
